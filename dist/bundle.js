(()=>{var e={532:(e,t,r)=>{const n=r(473),{shipNames:s}=r(323);e.exports=()=>{const e=s.map((e=>n(e))),t=function(e,t){var r=[];for(let e=0;e<10;e++)r.push(new Array(10).fill(0));return r}();return{shipFleet:e,matrix:t,placeShips:(e,r,n)=>{for(i=0;i<n.length;i++)t[e][r++]=n.length.toString()},receiveAttack:(r,n)=>{const s=t[r][n];"hit"!==t[r][n]&&"miss"!==t[r][n]&&(0!==s?e.forEach((e=>{e.length==s&&(t[r][n]="hit",e.hit())})):t[r][n]="miss")},allShipsSunk:()=>e.every((e=>!0===e.isSunk()))}}},809:(e,t,r)=>{const n=r(532);e.exports=()=>({playerBoard:n()})},473:(e,t,r)=>{const{shipLengths:n}=r(323);e.exports=e=>{const t=e,r=n[e],s=[];return{type:t,length:r,hit:()=>(s.push("hit"),s),isSunk:()=>s.length===r&&s.every((e=>"hit"===e)),shipHits:s}}},323:e=>{e.exports={shipLengths:{carrier:5,battleship:4,cruiser:3,submarine:3,destroyer:2},shipNames:["carrier","battleship","cruiser","submarine","destroyer"]}}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=r(809);const t=r.n(e)()(),{playerBoard:n}=t;n.matrix;const s=function(e){let t=document.createElement("table"),r=document.createElement("tbody");return[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]].forEach(((e,t)=>{let n=document.createElement("tr");e.forEach(((e,r)=>{let s=document.createElement("td");s.textContent=e,s.dataset.rowIndex=t,s.dataset.colIndex=r,n.appendChild(s)})),r.appendChild(n)})),t.appendChild(r),t}();console.log(s.innerHTML)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,